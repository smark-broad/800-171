---
###############################################################################
#
# Ansible remediation role for profile ospp42
# Profile Title:  OSPP - Protection Profile for General Purpose Operating Systems v. 4.2
# Profile Description:
# **Not applicable to CentOS Linux, included for reference only**
# 
# This profile reflects mandatory configuration controls identified in the
# NIAP Configuration Annex to the Protection Profile for General Purpose
# Operating Systems (Protection Profile Version 4.2).
# 
# This Annex is consistent with CNSSI-1253, which requires US National Security
# Systems to adhere to certain configuration parameters. Accordingly, configuration
# guidance produced according to the requirements of this Annex is suitable for use
# in US National Security Systems.
#
# Benchmark ID:  RHEL-7
# Benchmark Version:  0.1.40
#
# XCCDF Version:  1.1
#
# This file was generated by OpenSCAP 1.2.17 using:
# 	$ oscap xccdf generate fix --profile ospp42 --template urn:xccdf:fix:script:ansible xccdf-file.xml 
#
# This script is generated from an OpenSCAP profile without preliminary evaluation.
# It attempts to fix every selected rule, even if the system is already compliant.
#
# How to apply this remediation role:
# $ ansible-playbook -i "192.168.1.155," playbook.yml
# $ ansible-playbook -i inventory.ini playbook.yml
#
###############################################################################


 - hosts: all
   pre_tasks:
     - name: Verify Ansible meets SCAP-Security-Guide version requirements.
       assert:
         that: "ansible_version.full is version_compare('2.3', '>=')"
         msg: >
           "You must update Ansible to at least version 2.3 to use this role."
          
   vars:
   tasks:
    - name: Ensure sendmail is removed
      package:
        name: "{{item}}"
        state: absent
      with_items:
        - sendmail
      tags:
        - package_sendmail_removed
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-7
    
    - name: "Configure SSSD's Memory Cache to Expire"
      ini_file:
        dest: /etc/sssd/sssd.conf
        section: nss
        option: memcache_timeout
        value: 86400
        create: yes
      tags:
        - sssd_memcache_timeout
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-IA-5(10)
        - NIST-800-53-IA-5(13)
    
    - name: "Configure SSD to Expire Offline Credentials"
      ini_file:
        dest: /etc/sssd/sssd.conf
        section: pam
        option: offline_credentials_expiration
        value: 1
        create: yes
      tags:
        - sssd_offline_cred_expiration
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-IA-5(13)
    
    - name: Ensure abrt is removed
      package:
        name: "{{item}}"
        state: absent
      with_items:
        - abrt
      tags:
        - package_abrt_removed
        - unknown_severity
        - disable_strategy
        - low_complexity
        - low_disruption
    
    - name: "Disable SSH Support for User Known Hosts"
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^IgnoreUserKnownHosts
        line: IgnoreUserKnownHosts yes
        validate: sshd -t -f %s
      #notify: restart sshd
      tags:
        - sshd_disable_user_known_hosts
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - DISA-STIG-RHEL-07-040380
    
    - name: Disable SSH Access via Empty Passwords
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^PermitEmptyPasswords
        line: PermitEmptyPasswords no
        validate: sshd -t -f %s
      tags:
        - sshd_disable_empty_passwords
        - high_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-AC-6
        - NIST-800-53-CM-6(b)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - CJIS-5.5.6
        - DISA-STIG-RHEL-07-010300
    
    - name: Disable SSH Support for Rhosts RSA Authentication
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^RhostsRSAAuthentication
        line: RhostsRSAAuthentication no
        validate: sshd -t -f %s
      tags:
        - sshd_disable_rhosts_rsa
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - DISA-STIG-RHEL-07-040330
    
    - name: Enable SSH Warning Banner
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^Banner
        line: Banner /etc/issue
        validate: sshd -t -f %s
      tags:
        - sshd_enable_warning_banner
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)(1)
        - NIST-800-53-AC-8(c)(2)
        - NIST-800-53-AC-8(c)(3)
        - NIST-800-171-3.1.9
        - CJIS-5.5.6
        - DISA-STIG-RHEL-07-040170
    
    - name: "Disable Kerberos Authentication"
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: (?i)^#?kerberosauthentication
        line: KerberosAuthentication no
        validate: sshd -t -f %s
      #notify: restart sshd
      tags:
        - sshd_disable_kerb_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-6(c)
        - NIST-800-171-3.1.12
        - DISA-STIG-RHEL-07-040440
    
    - name: Disable SSH Support for .rhosts Files
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^IgnoreRhosts
        line: IgnoreRhosts yes
        validate: sshd -t -f %s
      tags:
        - sshd_disable_rhosts
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-CM-6(a)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6
        - DISA-STIG-RHEL-07-040350
    
    - name: Disable Host-Based Authentication
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: ^HostbasedAuthentication
        line: HostbasedAuthentication no
      tags:
        - disable_host_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-CM-6(b)
        - NIST-800-171-3.1.12
        - CJIS-5.5.6
        - DISA-STIG-RHEL-07-010470
    
    - name: "Disable GSSAPI Authentication"
      lineinfile:
        create: yes
        dest: /etc/ssh/sshd_config
        regexp: (?i)^#?gssapiauthentication
        line: GSSAPIAuthentication no
        validate: sshd -t -f %s
      #notify: sshd -t -f %s
      tags:
        - sshd_disable_gssapi_auth
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-6(c)
        - NIST-800-171-3.1.12
        - DISA-STIG-RHEL-07-040430
    
    - name: "Disable SSH Root Login"
      lineinfile:
        create: yes
        dest: "/etc/ssh/sshd_config"
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        insertafter: '(?i)^#?authentication'
        validate: sshd -t -f %s
      #notify: restart sshd
      tags:
        - sshd_disable_root_login
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-AC-6(2)
        - NIST-800-53-IA-2(1)
        - NIST-800-53-IA-2(5)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - CJIS-5.5.6
        - DISA-STIG-RHEL-07-040370
    
    - name: XCCDF Value rsyslog_remote_loghost_address # promote to variable
      set_fact:
        rsyslog_remote_loghost_address: !!str |-
            logcollector
      tags:
        - always
    
    - name: "Set rsyslog remote loghost"
      lineinfile:
        dest: /etc/rsyslog.conf
        regexp: "^\\*\\.\\*"
        line: "*.* @@{{ rsyslog_remote_loghost_address }}"
        create: yes
      tags:
        - rsyslog_remote_loghost
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(2)
        - NIST-800-53-AU-4(1)
        - NIST-800-53-AU-9
        - DISA-STIG-RHEL-07-031000
    
    - name: Enable service firewalld
      service:
        name: "{{item}}"
        enabled: "yes"
        state: "started"
      with_items:
        - firewalld
      tags:
        - service_firewalld_enabled
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-CM-6(b)
        - NIST-800-171-3.1.3
        - NIST-800-171-3.4.7
        - DISA-STIG-RHEL-07-040520
    
    - name: XCCDF Value var_selinux_policy_name # promote to variable
      set_fact:
        var_selinux_policy_name: !!str |-
            targeted
      tags:
        - always
    
    - name: "Configure SELinux Policy"
      lineinfile:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUXTYPE='
        line: "SELINUXTYPE={{ var_selinux_policy_name }}"
        create: yes
      tags:
        - selinux_policytype
        - high_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-AC-3(3)
        - NIST-800-53-AC-3(4)
        - NIST-800-53-AC-4
        - NIST-800-53-AC-6
        - NIST-800-53-AU-9
        - NIST-800-53-SI-6(a)
        - NIST-800-171-3.1.2
        - NIST-800-171-3.7.2
        - DISA-STIG-RHEL-07-020220
    
    - name: XCCDF Value var_selinux_state # promote to variable
      set_fact:
        var_selinux_state: !!str |-
            enforcing
      tags:
        - always
    
    - name: "Ensure SELinux State is Enforcing"
      lineinfile:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUX='
        line: "SELINUX={{ var_selinux_state }}"
        create: yes
      tags:
        - selinux_state
        - high_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-3
        - NIST-800-53-AC-3(3)
        - NIST-800-53-AC-3(4)
        - NIST-800-53-AC-4
        - NIST-800-53-AC-6
        - NIST-800-53-AU-9
        - NIST-800-53-SI-6(a)
        - NIST-800-171-3.1.2
        - NIST-800-171-3.7.2
        - DISA-STIG-RHEL-07-020210
    
    - name: XCCDF Value var_accounts_password_minlen_login_defs # promote to variable
      set_fact:
        var_accounts_password_minlen_login_defs: !!str |-
            15
      tags:
        - always
    
    - name: "Set Password Minimum Length in login.defs"
      lineinfile:
        dest: /etc/login.defs
        regexp: "^PASS_MIN_LEN *[0-9]*"
        state: present
        line: "PASS_MIN_LEN        {{ var_accounts_password_minlen_login_defs }}"
      tags:
        - accounts_password_minlen_login_defs
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(f)
        - NIST-800-53-IA-5(1)(a)
        - NIST-800-171-3.5.7
        - CJIS-5.6.2.1
    
    - name: "Prevent Log In to Accounts With Empty Password - system-auth"
      replace:
        dest: /etc/pam.d/system-auth
        follow: yes
        regexp: 'nullok'
      tags:
        - no_empty_passwords
        - high_severity
        - configure_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-6
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-IA-5(1)(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - PCI-DSS-Req-8.2.3
        - CJIS-5.5.2
        - DISA-STIG-RHEL-07-010290
    
    - name: "Prevent Log In to Accounts With Empty Password - password-auth"
      replace:
        dest: /etc/pam.d/password-auth
        follow: yes
        regexp: 'nullok'
      tags:
        - no_empty_passwords
        - high_severity
        - configure_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-6
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-IA-5(1)(a)
        - NIST-800-171-3.1.1
        - NIST-800-171-3.1.5
        - PCI-DSS-Req-8.2.3
        - CJIS-5.5.2
        - DISA-STIG-RHEL-07-010290
    
    - name: XCCDF Value var_accounts_passwords_pam_faillock_deny # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_deny: !!str |-
            3
      tags:
        - always
    - name: XCCDF Value var_accounts_passwords_pam_faillock_unlock_time # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_unlock_time: !!str |-
            never
      tags:
        - always
    - name: XCCDF Value var_accounts_passwords_pam_faillock_fail_interval # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_fail_interval: !!str |-
            900
      tags:
        - always
    
    - name: set auth pam_faillock before pam_unix.so
      pamd:
        name: system-auth
        type: auth
        control: sufficient
        module_path: pam_unix.so
        new_type: auth
        new_control: required
        new_module_path: pam_faillock.so
        module_arguments: 'preauth
            silent
            even_deny_root
            deny: {{ var_accounts_passwords_pam_faillock_deny }}
            unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
            fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
        state: before
      tags:
        - accounts_passwords_pam_faillock_deny_root
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - DISA-STIG-RHEL-07-010330
    
    - name: set auth pam_faillock after pam_unix.so
      pamd:
        name: system-auth
        type: auth
        control: sufficient
        module_path: pam_unix.so
        new_type: auth
        new_control: '[default=die]'
        new_module_path: pam_faillock.so
        module_arguments: 'preauth
            silent
            even_deny_root
            deny: {{ var_accounts_passwords_pam_faillock_deny }}
            unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
            fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
        state: after
      tags:
        - accounts_passwords_pam_faillock_deny_root
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - DISA-STIG-RHEL-07-010330
    
    - name: set account pam_faillock before pam_unix.so
      pamd:
        name: system-auth
        type: account
        control: required
        module_path: pam_unix.so
        new_type: account
        new_control: required
        new_module_path: pam_faillock.so
        state: before
      tags:
        - accounts_passwords_pam_faillock_deny_root
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - DISA-STIG-RHEL-07-010330
    
    - name: XCCDF Value var_accounts_passwords_pam_faillock_deny # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_deny: !!str |-
            3
      tags:
        - always
    - name: XCCDF Value var_accounts_passwords_pam_faillock_unlock_time # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_unlock_time: !!str |-
            never
      tags:
        - always
    - name: XCCDF Value var_accounts_passwords_pam_faillock_fail_interval # promote to variable
      set_fact:
        var_accounts_passwords_pam_faillock_fail_interval: !!str |-
            900
      tags:
        - always
    
    - name: set auth pam_faillock before pam_unix.so
      pamd:
        name: system-auth
        type: auth
        control: sufficient
        module_path: pam_unix.so
        new_type: auth
        new_control: required
        new_module_path: pam_faillock.so
        module_arguments: 'preauth
            silent
            deny: {{ var_accounts_passwords_pam_faillock_deny }}
            unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
            fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
        state: before
      tags:
        - accounts_passwords_pam_faillock_deny
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - NIST-800-171-3.1.8
        - PCI-DSS-Req-8.1.6
        - CJIS-5.5.3
        - DISA-STIG-RHEL-07-010320
    
    - name: set auth pam_faillock after pam_unix.so
      pamd:
        name: system-auth
        type: auth
        control: sufficient
        module_path: pam_unix.so
        new_type: auth
        new_control: '[default=die]'
        new_module_path: pam_faillock.so
        module_arguments: 'preauth
            silent
            deny: {{ var_accounts_passwords_pam_faillock_deny }}
            unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
            fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
        state: after
      tags:
        - accounts_passwords_pam_faillock_deny
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - NIST-800-171-3.1.8
        - PCI-DSS-Req-8.1.6
        - CJIS-5.5.3
        - DISA-STIG-RHEL-07-010320
    
    - name: set account pam_faillock before pam_unix.so
      pamd:
        name: system-auth
        type: account
        control: required
        module_path: pam_unix.so
        new_type: account
        new_control: required
        new_module_path: pam_faillock.so
        state: before
      tags:
        - accounts_passwords_pam_faillock_deny
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-7(b)
        - NIST-800-171-3.1.8
        - PCI-DSS-Req-8.1.6
        - CJIS-5.5.3
        - DISA-STIG-RHEL-07-010320
    
    - name: XCCDF Value var_password_pam_minlen # promote to variable
      set_fact:
        var_password_pam_minlen: !!str |-
            12
      tags:
        - always
    
    - name: Ensure PAM variable minlen is set accordingly
    
      lineinfile:
        create: yes
        dest: "/etc/security/pwquality.conf"
        regexp: '^#?\s*minlen'
        line: "minlen = {{ var_password_pam_minlen }}"
    
      tags:
        - accounts_password_pam_minlen
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(1)(a)
        - PCI-DSS-Req-8.2.3
        - CJIS-5.6.2.1.1
        - DISA-STIG-RHEL-07-010280
    
    - name: XCCDF Value var_password_pam_dcredit # promote to variable
      set_fact:
        var_password_pam_dcredit: !!str |-
            -1
      tags:
        - always
    
    - name: Ensure PAM variable dcredit is set accordingly
    
      lineinfile:
        create: yes
        dest: "/etc/security/pwquality.conf"
        regexp: '^#?\s*dcredit'
        line: "dcredit = {{ var_password_pam_dcredit }}"
    
      tags:
        - accounts_password_pam_dcredit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(1)(a)
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-194
        - PCI-DSS-Req-8.2.3
        - DISA-STIG-RHEL-07-010140
    
    - name: XCCDF Value var_password_pam_ocredit # promote to variable
      set_fact:
        var_password_pam_ocredit: !!str |-
            -1
      tags:
        - always
    
    - name: Ensure PAM variable ocredit is set accordingly
    
      lineinfile:
        create: yes
        dest: "/etc/security/pwquality.conf"
        regexp: '^#?\s*ocredit'
        line: "ocredit = {{ var_password_pam_ocredit }}"
    
      tags:
        - accounts_password_pam_ocredit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-IA-5(1)(a)
        - DISA-STIG-RHEL-07-010150
    
    - name: XCCDF Value var_password_pam_lcredit # promote to variable
      set_fact:
        var_password_pam_lcredit: !!str |-
            -1
      tags:
        - always
    
    - name: Ensure PAM variable lcredit is set accordingly
    
      lineinfile:
        create: yes
        dest: "/etc/security/pwquality.conf"
        regexp: '^#?\s*lcredit'
        line: "lcredit = {{ var_password_pam_lcredit }}"
    
      tags:
        - accounts_password_pam_lcredit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-IA-5(1)(a)
        - PCI-DSS-Req-8.2.3
        - DISA-STIG-RHEL-07-010130
    
    - name: XCCDF Value var_password_pam_ucredit # promote to variable
      set_fact:
        var_password_pam_ucredit: !!str |-
            -1
      tags:
        - always
    
    - name: Ensure PAM variable ucredit is set accordingly
    
      lineinfile:
        create: yes
        dest: "/etc/security/pwquality.conf"
        regexp: '^#?\s*ucredit'
        line: "ucredit = {{ var_password_pam_ucredit }}"
    
      tags:
        - accounts_password_pam_ucredit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-IA-5(b)
        - NIST-800-53-IA-5(c)
        - NIST-800-53-IA-5(1)(a)
        - PCI-DSS-Req-8.2.3
        - DISA-STIG-RHEL-07-010120
    
    - name: XCCDF Value var_password_pam_retry # promote to variable
      set_fact:
        var_password_pam_retry: !!str |-
            3
      tags:
        - always
    
    - name: "Set Password Retry Prompts Permitted Per-Session - system-auth (change)"
      replace:
        dest: /etc/pam.d/system-auth
        follow: yes
        regexp: '(^.*\spam_pwquality.so\s.*retry\s*=\s*)(\S+)(.*$)'
        replace: '\g<1>{{ var_password_pam_retry }}\g<3>'
      tags:
        - accounts_password_pam_retry
        - unknown_severity
        - configure_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-6(b)
        - NIST-800-53-IA-5(c)
        - CJIS-5.5.3
        - DISA-STIG-RHEL-07-010119
    
    - name: "Set Password Retry Prompts Permitted Per-Session - system-auth (add)"
      replace:
        dest: /etc/pam.d/system-auth
        follow: yes
        regexp: '^.*\spam_pwquality.so\s(?!.*retry\s*=\s*).*$'
        replace: '\g<0> retry={{ var_password_pam_retry }}'
      tags:
        - accounts_password_pam_retry
        - unknown_severity
        - configure_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-6(b)
        - NIST-800-53-IA-5(c)
        - CJIS-5.5.3
        - DISA-STIG-RHEL-07-010119
    
    - name: Ensure screen is installed
      package:
        name: "{{item}}"
        state: present
      with_items:
        - screen
      tags:
        - package_screen_installed
        - medium_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - DISA-STIG-RHEL-07-010090
    
    - name: Disable service debug-shell
      service:
        name: "{{item}}"
        enabled: "no"
        state: "stopped"
      register: service_result
      failed_when: "service_result is failed and ('Could not find the requested service' not in service_result.msg)"
      with_items:
        - debug-shell
      tags:
        - service_debug-shell_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-171-3.4.5
    
    
    - name: Disable socket of service debug-shell if applicable
      service:
        name: "{{item}}"
        enabled: "no"
        state: "stopped"
      register: socket_result
      failed_when: "socket_result is failed and ('Could not find the requested service' not in socket_result.msg)"
      with_items:
        - debug-shell.socket
      tags:
        - service_debug-shell_disabled
        - medium_severity
        - disable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-171-3.4.5
    
    - name: "Enable GNOME3 Login Warning Banner"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/login-screen"
        option: banner-message-enable
        value: "true"
        create: yes
      tags:
        - dconf_gnome_banner_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)(1)
        - NIST-800-53-AC-8(c)(2)
        - NIST-800-53-AC-8(c)(3)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010030
    
    - name: "Prevent user modification of GNOME banner-message-enabled"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/login-screen/banner-message-enable'
        line: '/org/gnome/login-screen/banner-message-enable'
        create: yes
      tags:
        - dconf_gnome_banner_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)(1)
        - NIST-800-53-AC-8(c)(2)
        - NIST-800-53-AC-8(c)(3)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010030
    
    - name: XCCDF Value login_banner_text # promote to variable
      set_fact:
        login_banner_text: !!str |-
            --[\s\n]+WARNING[\s\n]+--[\s\n]*This[\s\n]+system[\s\n]+is[\s\n]+for[\s\n]+the[\s\n]+use[\s\n]+of[\s\n]+authorized[\s\n]+users[\s\n]+only.[\s\n]+Individuals[\s\n]*using[\s\n]+this[\s\n]+computer[\s\n]+system[\s\n]+without[\s\n]+authority[\s\n]+or[\s\n]+in[\s\n]+excess[\s\n]+of[\s\n]+their[\s\n]*authority[\s\n]+are[\s\n]+subject[\s\n]+to[\s\n]+having[\s\n]+all[\s\n]+their[\s\n]+activities[\s\n]+on[\s\n]+this[\s\n]+system[\s\n]*monitored[\s\n]+and[\s\n]+recorded[\s\n]+by[\s\n]+system[\s\n]+personnel.[\s\n]+Anyone[\s\n]+using[\s\n]+this[\s\n]*system[\s\n]+expressly[\s\n]+consents[\s\n]+to[\s\n]+such[\s\n]+monitoring[\s\n]+and[\s\n]+is[\s\n]+advised[\s\n]+that[\s\n]*if[\s\n]+such[\s\n]+monitoring[\s\n]+reveals[\s\n]+possible[\s\n]+evidence[\s\n]+of[\s\n]+criminal[\s\n]+activity[\s\n]*system[\s\n]+personal[\s\n]+may[\s\n]+provide[\s\n]+the[\s\n]+evidence[\s\n]+of[\s\n]+such[\s\n]+monitoring[\s\n]+to[\s\n]+law[\s\n]*enforcement[\s\n]+officials.
      tags:
        - always
    
    - name: "Set the GNOME3 Login Warning Banner Text"
      file:
        path: "/etc/dconf/db/{{ item }}"
        owner: root
        group: root
        mode: 0755
        state: directory
      with_items:
        - gdm.d
        - gdm.d/locks
      tags:
        - dconf_gnome_login_banner_text
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010040
    
    - name: "Set the GNOME3 Login Warning Banner Text"
      file:
        path: "/etc/dconf/db/gdm.d/{{ item }}"
        owner: root
        group: root
        mode: 0644
        state: touch
      with_items:
        - 00-security-settings
        - locks/00-security-settings-lock
      tags:
        - dconf_gnome_login_banner_text
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010040
    
    - name: "Set the GNOME3 Login Warning Banner Text"
      ini_file:
        dest: /etc/dconf/db/gdm.d/00-security-settings
        section: org/gnome/login-screen
        option: banner-message-text
        value: string '{{ login_banner_text }}'
        create: yes
      tags:
        - dconf_gnome_login_banner_text
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010040
    
    - name: "Prevent user modification of the GNOME3 Login Warning Banner Text"
      lineinfile:
        path: '/etc/dconf/db/gdm.d/locks/00-security-settings-lock'
        regexp: '^org/gnome/login-screen/banner-message-text$'
        line: 'org/gnome/login-screen/banner-message-text'
        create: yes
        state: present
      tags:
        - dconf_gnome_login_banner_text
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-8(a)
        - NIST-800-53-AC-8(b)
        - NIST-800-53-AC-8(c)
        - NIST-800-171-3.1.9
        - DISA-STIG-RHEL-07-010040
    
    - name: XCCDF Value var_accounts_tmout # promote to variable
      set_fact:
        var_accounts_tmout: !!str |-
            600
      tags:
        - always
    
    - name: Set Interactive Session Timeout
      lineinfile:
          create: yes
          dest: /etc/profile
          regexp: ^#?TMOUT
          line: "TMOUT={{ var_accounts_tmout }}"
      tags:
        - accounts_tmout
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-12
        - NIST-800-53-SC-10
        - NIST-800-171-3.1.11
        - DISA-STIG-RHEL-07-040160
    
    - name: Ensure sysctl kernel.kptr_restrict is set to 1
      sysctl:
        name: kernel.kptr_restrict
        value: 1
        state: present
        reload: yes
      tags:
        - sysctl_kernel_kptr_restrict
        - low_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
    
    - name: Ensure sysctl kernel.kexec_load_disabled is set to 1
      sysctl:
        name: kernel.kexec_load_disabled
        value: 1
        state: present
        reload: yes
      tags:
        - sysctl_kernel_kexec_load_disabled
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
    
    - name: Ensure sysctl kernel.yama.ptrace_scope is set to 1
      sysctl:
        name: kernel.yama.ptrace_scope
        value: 1
        state: present
        reload: yes
      tags:
        - sysctl_kernel_yama_ptrace_scope
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
    
    - name: Ensure sysctl kernel.dmesg_restrict is set to 1
      sysctl:
        name: kernel.dmesg_restrict
        value: 1
        state: present
        reload: yes
      tags:
        - sysctl_kernel_dmesg_restrict
        - unknown_severity
        - disable_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-SI-11
        - NIST-800-171-3.1.5
    
    - name: get back device associated to mountpoint
      shell: mount | grep ' /dev/shm ' |cut -d ' ' -f 1
      register: device_name
      check_mode: no
      tags:
        - mount_option_dev_shm_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device previous mount option
      shell: mount | grep ' /dev/shm ' | sed -re 's:.*\((.*)\):\1:'
      register: device_cur_mountoption
      check_mode: no
      tags:
        - mount_option_dev_shm_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device fstype
      shell: mount | grep ' /dev/shm ' | cut -d ' ' -f 5
      register: device_fstype
      check_mode: no
      tags:
        - mount_option_dev_shm_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: Ensure permission noexec are set on /dev/shm
      mount:
        path: "/dev/shm"
        src: "{{device_name.stdout}}"
        opts: "{{device_cur_mountoption.stdout}},noexec"
        state: "mounted"
        fstype: "{{device_fstype.stdout}}"
      tags:
        - mount_option_dev_shm_noexec
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device associated to mountpoint
      shell: mount | grep ' /dev/shm ' |cut -d ' ' -f 1
      register: device_name
      check_mode: no
      tags:
        - mount_option_dev_shm_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device previous mount option
      shell: mount | grep ' /dev/shm ' | sed -re 's:.*\((.*)\):\1:'
      register: device_cur_mountoption
      check_mode: no
      tags:
        - mount_option_dev_shm_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device fstype
      shell: mount | grep ' /dev/shm ' | cut -d ' ' -f 5
      register: device_fstype
      check_mode: no
      tags:
        - mount_option_dev_shm_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: Ensure permission nosuid are set on /dev/shm
      mount:
        path: "/dev/shm"
        src: "{{device_name.stdout}}"
        opts: "{{device_cur_mountoption.stdout}},nosuid"
        state: "mounted"
        fstype: "{{device_fstype.stdout}}"
      tags:
        - mount_option_dev_shm_nosuid
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device associated to mountpoint
      shell: mount | grep ' /dev/shm ' |cut -d ' ' -f 1
      register: device_name
      check_mode: no
      tags:
        - mount_option_dev_shm_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device previous mount option
      shell: mount | grep ' /dev/shm ' | sed -re 's:.*\((.*)\):\1:'
      register: device_cur_mountoption
      check_mode: no
      tags:
        - mount_option_dev_shm_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: get back device fstype
      shell: mount | grep ' /dev/shm ' | cut -d ' ' -f 5
      register: device_fstype
      check_mode: no
      tags:
        - mount_option_dev_shm_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    - name: Ensure permission nodev are set on /dev/shm
      mount:
        path: "/dev/shm"
        src: "{{device_name.stdout}}"
        opts: "{{device_cur_mountoption.stdout}},nodev"
        state: "mounted"
        fstype: "{{device_fstype.stdout}}"
      tags:
        - mount_option_dev_shm_nodev
        - unknown_severity
        - configure_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-CM-7
        - NIST-800-53-MP-2
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lastlog tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k logins$"
        patterns: "*.rules"
      register: find_lastlog
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/logins.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/logins.rules
      when: find_lastlog.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lastlog.files | map(attribute='path') | list | first }}"
      when: find_lastlog.matched > 0
    
    - name: Inserts/replaces the lastlog rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /var/log/lastlog -p wa -k logins"
        create: yes
      tags:
        - audit_rules_login_events_lastlog
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030620
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lastlog rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /var/log/lastlog -p wa -k logins"
      tags:
        - audit_rules_login_events_lastlog
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030620
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit faillock tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k logins$"
        patterns: "*.rules"
      register: find_faillock
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/logins.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/logins.rules
      when: find_faillock.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_faillock.files | map(attribute='path') | list | first }}"
      when: find_faillock.matched > 0
    
    - name: Inserts/replaces the faillock rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /var/run/faillock -p wa -k logins"
        create: yes
      tags:
        - audit_rules_login_events_faillock
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030610
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the faillock rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /var/run/faillock -p wa -k logins"
      tags:
        - audit_rules_login_events_faillock
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030610
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit tallylog tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k logins$"
        patterns: "*.rules"
      register: find_tallylog
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/logins.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/logins.rules
      when: find_tallylog.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_tallylog.files | map(attribute='path') | list | first }}"
      when: find_tallylog.matched > 0
    
    - name: Inserts/replaces the tallylog rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /var/log/tallylog -p wa -k logins"
        create: yes
      tags:
        - audit_rules_login_events_tallylog
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030600
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the tallylog rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /var/log/tallylog -p wa -k logins"
      tags:
        - audit_rules_login_events_tallylog
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.3
        - DISA-STIG-RHEL-07-030600
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fchown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchown.files | map(attribute='path') | list | first }}"
      when: find_fchown.matched > 0
    
    - name: Inserts/replaces the fchown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030380
    
    - name: Inserts/replaces the fchown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030380
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030380
    
    - name: Inserts/replaces the fchown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030380
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit setxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_setxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_setxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_setxattr.files | map(attribute='path') | list | first }}"
      when: find_setxattr.matched > 0
    
    - name: Inserts/replaces the setxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_setxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030440
    
    - name: Inserts/replaces the setxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_setxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030440
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the setxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_setxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030440
    
    - name: Inserts/replaces the setxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S setxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_setxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030440
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit chown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_chown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_chown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chown.files | map(attribute='path') | list | first }}"
      when: find_chown.matched > 0
    
    - name: Inserts/replaces the chown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_chown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030370
    
    - name: Inserts/replaces the chown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_chown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030370
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the chown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_chown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030370
    
    - name: Inserts/replaces the chown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_chown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030370
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lsetxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lsetxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_lsetxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lsetxattr.files | map(attribute='path') | list | first }}"
      when: find_lsetxattr.matched > 0
    
    - name: Inserts/replaces the lsetxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_lsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030460
    
    - name: Inserts/replaces the lsetxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030460
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lsetxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_lsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030460
    
    - name: Inserts/replaces the lsetxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030460
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lchown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lchown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_lchown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lchown.files | map(attribute='path') | list | first }}"
      when: find_lchown.matched > 0
    
    - name: Inserts/replaces the lchown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_lchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030390
    
    - name: Inserts/replaces the lchown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030390
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lchown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_lchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030390
    
    - name: Inserts/replaces the lchown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lchown -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lchown
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030390
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit chmod tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_chmod
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_chmod.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chmod.files | map(attribute='path') | list | first }}"
      when: find_chmod.matched > 0
    
    - name: Inserts/replaces the chmod rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_chmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030410
    
    - name: Inserts/replaces the chmod rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_chmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030410
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the chmod rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_chmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030410
    
    - name: Inserts/replaces the chmod rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_chmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030410
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit removexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_removexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_removexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_removexattr.files | map(attribute='path') | list | first }}"
      when: find_removexattr.matched > 0
    
    - name: Inserts/replaces the removexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030470
    
    - name: Inserts/replaces the removexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030470
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the removexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030470
    
    - name: Inserts/replaces the removexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S removexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030470
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fremovexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fremovexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fremovexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fremovexattr.files | map(attribute='path') | list | first }}"
      when: find_fremovexattr.matched > 0
    
    - name: Inserts/replaces the fremovexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030480
    
    - name: Inserts/replaces the fremovexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030480
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fremovexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030480
    
    - name: Inserts/replaces the fremovexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030480
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchownat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchownat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fchownat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchownat.files | map(attribute='path') | list | first }}"
      when: find_fchownat.matched > 0
    
    - name: Inserts/replaces the fchownat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fchownat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030400
    
    - name: Inserts/replaces the fchownat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchownat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030400
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchownat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fchownat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030400
    
    - name: Inserts/replaces the fchownat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchownat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchownat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030400
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchmod tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchmod
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fchmod.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchmod.files | map(attribute='path') | list | first }}"
      when: find_fchmod.matched > 0
    
    - name: Inserts/replaces the fchmod rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fchmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030420
    
    - name: Inserts/replaces the fchmod rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030420
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchmod rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fchmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030420
    
    - name: Inserts/replaces the fchmod rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmod -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchmod
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030420
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lremovexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lremovexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_lremovexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lremovexattr.files | map(attribute='path') | list | first }}"
      when: find_lremovexattr.matched > 0
    
    - name: Inserts/replaces the lremovexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030490
    
    - name: Inserts/replaces the lremovexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030490
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lremovexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030490
    
    - name: Inserts/replaces the lremovexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lremovexattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030490
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fsetxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fsetxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fsetxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fsetxattr.files | map(attribute='path') | list | first }}"
      when: find_fsetxattr.matched > 0
    
    - name: Inserts/replaces the fsetxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030450
    
    - name: Inserts/replaces the fsetxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030450
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fsetxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030450
    
    - name: Inserts/replaces the fsetxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fsetxattr -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fsetxattr
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030450
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchmodat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchmodat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_fchmodat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchmodat.files | map(attribute='path') | list | first }}"
      when: find_fchmodat.matched > 0
    
    - name: Inserts/replaces the fchmodat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b32 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      tags:
        - audit_rules_dac_modification_fchmodat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030430
    
    - name: Inserts/replaces the fchmodat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-a always,exit -F arch=b64 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
        create: yes
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchmodat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030430
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchmodat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      tags:
        - audit_rules_dac_modification_fchmodat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030430
    
    - name: Inserts/replaces the fchmodat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmodat -F auid>=1000 -F auid!=4294967295 -F key=perm_mod"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_dac_modification_fchmodat
        - unknown_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.5.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030430
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/seunshare.*$"
        patterns: "*.rules"
      register: find_seunshare
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_seunshare.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_seunshare.files | map(attribute='path') | list | first }}"
      when: find_seunshare.matched > 0
    
    - name: Inserts/replaces the seunshare rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/seunshare -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_seunshare
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the seunshare rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the seunshare rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/seunshare -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_seunshare
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/setsebool.*$"
        patterns: "*.rules"
      register: find_setsebool
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_setsebool.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_setsebool.files | map(attribute='path') | list | first }}"
      when: find_setsebool.matched > 0
    
    - name: Inserts/replaces the setsebool rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/setsebool -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_setsebool
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030570
       
    # Inserts/replaces the setsebool rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the setsebool rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/setsebool -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_setsebool
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030570
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/semanage.*$"
        patterns: "*.rules"
      register: find_semanage
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_semanage.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_semanage.files | map(attribute='path') | list | first }}"
      when: find_semanage.matched > 0
    
    - name: Inserts/replaces the semanage rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_semanage
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030560
       
    # Inserts/replaces the semanage rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the semanage rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/semanage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_semanage
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030560
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/chcon.*$"
        patterns: "*.rules"
      register: find_chcon
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_chcon.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chcon.files | map(attribute='path') | list | first }}"
      when: find_chcon.matched > 0
    
    - name: Inserts/replaces the chcon rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_chcon
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030580
       
    # Inserts/replaces the chcon rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the chcon rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_chcon
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030580
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/restorecon.*$"
        patterns: "*.rules"
      register: find_restorecon
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_restorecon.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_restorecon.files | map(attribute='path') | list | first }}"
      when: find_restorecon.matched > 0
    
    - name: Inserts/replaces the restorecon rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/restorecon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_restorecon
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
       
    # Inserts/replaces the restorecon rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the restorecon rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/restorecon -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_execution_restorecon
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/passwd.*$"
        patterns: "*.rules"
      register: find_passwd
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_passwd.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_passwd.files | map(attribute='path') | list | first }}"
      when: find_passwd.matched > 0
    
    - name: Inserts/replaces the passwd rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/passwd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_passwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030630
       
    # Inserts/replaces the passwd rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the passwd rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/passwd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_passwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030630
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/sudo.*$"
        patterns: "*.rules"
      register: find_sudo
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_sudo.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_sudo.files | map(attribute='path') | list | first }}"
      when: find_sudo.matched > 0
    
    - name: Inserts/replaces the sudo rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_sudo
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030690
       
    # Inserts/replaces the sudo rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the sudo rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_sudo
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030690
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/usernetctl.*$"
        patterns: "*.rules"
      register: find_usernetctl
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_usernetctl.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_usernetctl.files | map(attribute='path') | list | first }}"
      when: find_usernetctl.matched > 0
    
    - name: Inserts/replaces the usernetctl rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/usernetctl -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_usernetctl
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the usernetctl rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the usernetctl rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/usernetctl -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_usernetctl
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/chsh.*$"
        patterns: "*.rules"
      register: find_chsh
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_chsh.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chsh.files | map(attribute='path') | list | first }}"
      when: find_chsh.matched > 0
    
    - name: Inserts/replaces the chsh rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_chsh
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030720
       
    # Inserts/replaces the chsh rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the chsh rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_chsh
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030720
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/newgidmap.*$"
        patterns: "*.rules"
      register: find_newgidmap
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_newgidmap.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_newgidmap.files | map(attribute='path') | list | first }}"
      when: find_newgidmap.matched > 0
    
    - name: Inserts/replaces the newgidmap rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/newgidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newgidmap
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the newgidmap rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the newgidmap rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/newgidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newgidmap
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/gpasswd.*$"
        patterns: "*.rules"
      register: find_gpasswd
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_gpasswd.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_gpasswd.files | map(attribute='path') | list | first }}"
      when: find_gpasswd.matched > 0
    
    - name: Inserts/replaces the gpasswd rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/gpasswd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_gpasswd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030650
       
    # Inserts/replaces the gpasswd rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the gpasswd rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/gpasswd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_gpasswd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030650
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/chage.*$"
        patterns: "*.rules"
      register: find_chage
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_chage.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chage.files | map(attribute='path') | list | first }}"
      when: find_chage.matched > 0
    
    - name: Inserts/replaces the chage rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/chage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_chage
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030660
       
    # Inserts/replaces the chage rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the chage rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/chage -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_chage
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030660
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/userhelper.*$"
        patterns: "*.rules"
      register: find_userhelper
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_userhelper.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_userhelper.files | map(attribute='path') | list | first }}"
      when: find_userhelper.matched > 0
    
    - name: Inserts/replaces the userhelper rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/userhelper -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_userhelper
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030670
       
    # Inserts/replaces the userhelper rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the userhelper rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/userhelper -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_userhelper
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030670
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/at.*$"
        patterns: "*.rules"
      register: find_at
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_at.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_at.files | map(attribute='path') | list | first }}"
      when: find_at.matched > 0
    
    - name: Inserts/replaces the at rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/at -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the at rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the at rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/at -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/crontab.*$"
        patterns: "*.rules"
      register: find_crontab
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_crontab.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_crontab.files | map(attribute='path') | list | first }}"
      when: find_crontab.matched > 0
    
    - name: Inserts/replaces the crontab rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/crontab -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_crontab
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030800
       
    # Inserts/replaces the crontab rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the crontab rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/crontab -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_crontab
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030800
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/umount.*$"
        patterns: "*.rules"
      register: find_umount
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_umount.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_umount.files | map(attribute='path') | list | first }}"
      when: find_umount.matched > 0
    
    - name: Inserts/replaces the umount rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/umount -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_umount
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030750
       
    # Inserts/replaces the umount rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the umount rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/umount -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_umount
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030750
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/sbin/unix_chkpwd.*$"
        patterns: "*.rules"
      register: find_unix_chkpwd
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_unix_chkpwd.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_unix_chkpwd.files | map(attribute='path') | list | first }}"
      when: find_unix_chkpwd.matched > 0
    
    - name: Inserts/replaces the unix_chkpwd rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/sbin/unix_chkpwd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_unix_chkpwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030640
       
    # Inserts/replaces the unix_chkpwd rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the unix_chkpwd rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/sbin/unix_chkpwd -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_unix_chkpwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030640
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/libexec/pt_chown.*$"
        patterns: "*.rules"
      register: find_pt_chown
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_pt_chown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_pt_chown.files | map(attribute='path') | list | first }}"
      when: find_pt_chown.matched > 0
    
    - name: Inserts/replaces the pt_chown rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/libexec/pt_chown -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_pt_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
       
    # Inserts/replaces the pt_chown rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the pt_chown rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/libexec/pt_chown -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_pt_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/libexec/openssh/ssh-keysign.*$"
        patterns: "*.rules"
      register: find_ssh_keysign
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_ssh_keysign.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_ssh_keysign.files | map(attribute='path') | list | first }}"
      when: find_ssh_keysign.matched > 0
    
    - name: Inserts/replaces the ssh_keysign rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/libexec/openssh/ssh-keysign -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_ssh_keysign
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030780
       
    # Inserts/replaces the ssh_keysign rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the ssh_keysign rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/libexec/openssh/ssh-keysign -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_ssh_keysign
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030780
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/sudoedit.*$"
        patterns: "*.rules"
      register: find_sudoedit
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_sudoedit.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_sudoedit.files | map(attribute='path') | list | first }}"
      when: find_sudoedit.matched > 0
    
    - name: Inserts/replaces the sudoedit rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_sudoedit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030730
       
    # Inserts/replaces the sudoedit rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the sudoedit rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_sudoedit
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030730
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/mount.*$"
        patterns: "*.rules"
      register: find_mount
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_mount.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_mount.files | map(attribute='path') | list | first }}"
      when: find_mount.matched > 0
    
    - name: Inserts/replaces the mount rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/mount -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_mount
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the mount rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the mount rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/mount -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_mount
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/newuidmap.*$"
        patterns: "*.rules"
      register: find_newuidmap
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_newuidmap.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_newuidmap.files | map(attribute='path') | list | first }}"
      when: find_newuidmap.matched > 0
    
    - name: Inserts/replaces the newuidmap rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/newuidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newuidmap
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
       
    # Inserts/replaces the newuidmap rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the newuidmap rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/newuidmap -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newuidmap
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/su.*$"
        patterns: "*.rules"
      register: find_su
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_su.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_su.files | map(attribute='path') | list | first }}"
      when: find_su.matched > 0
    
    - name: Inserts/replaces the su rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/su -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_su
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030680
       
    # Inserts/replaces the su rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the su rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/su -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_su
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030680
    
    
    # Inserts/replaces the rule in /etc/audit/rules.d
    
    - name: Search /etc/audit/rules.d for audit rule entries
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "^.*path=/usr/bin/newgrp.*$"
        patterns: "*.rules"
      register: find_newgrp
    
    - name: Use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_newgrp.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_newgrp.files | map(attribute='path') | list | first }}"
      when: find_newgrp.matched > 0
    
    - name: Inserts/replaces the newgrp rule in rules.d
      lineinfile:
        path: "{{ all_files[0] }}"
        line: '-a always,exit -F path=/usr/bin/newgrp -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newgrp
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030710
       
    # Inserts/replaces the newgrp rule in /etc/audit/audit.rules
    
    - name: Inserts/replaces the newgrp rule in audit.rules
      lineinfile:
        path: /etc/audit/audit.rules
        line: '-a always,exit -F path=/usr/bin/newgrp -F perm=x -F auid>=1000 -F auid!=4294967295 -F key=privileged'
        create: yes
      tags:
        - audit_rules_privileged_commands_newgrp
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3(1)
        - NIST-800-53-AU-12(c)
        - NIST-800-171-3.1.7
        - DISA-STIG-RHEL-07-030710
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit renameat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_renameat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_renameat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_renameat.files | map(attribute='path') | list | first }}"
      when: find_renameat.matched > 0
    
    - name: Inserts/replaces the renameat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_renameat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the renameat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_renameat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the renameat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_renameat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the renameat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S renameat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S renameat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_renameat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchownat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchownat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fchownat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchownat.files | map(attribute='path') | list | first }}"
      when: find_fchownat.matched > 0
    
    - name: Inserts/replaces the fchownat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchownat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchownat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchownat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchownat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchownat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchownat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchownat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchownat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchownat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lchown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lchown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_lchown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lchown.files | map(attribute='path') | list | first }}"
      when: find_lchown.matched > 0
    
    - name: Inserts/replaces the lchown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lchown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lchown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lchown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchmodat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchmodat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fchmodat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchmodat.files | map(attribute='path') | list | first }}"
      when: find_fchmodat.matched > 0
    
    - name: Inserts/replaces the fchmodat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchmodat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchmodat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchmodat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchmodat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchmodat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchmodat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchmodat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchmodat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit removexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_removexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_removexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_removexattr.files | map(attribute='path') | list | first }}"
      when: find_removexattr.matched > 0
    
    - name: Inserts/replaces the removexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the removexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the removexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the removexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S removexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S removexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_removexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit chown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_chown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_chown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chown.files | map(attribute='path') | list | first }}"
      when: find_chown.matched > 0
    
    - name: Inserts/replaces the chown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the chown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the chown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the chown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S chown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_chown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchown tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchown
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fchown.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchown.files | map(attribute='path') | list | first }}"
      when: find_fchown.matched > 0
    
    - name: Inserts/replaces the fchown rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchown rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchown rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchown rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchown -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchown -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchown
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit truncate tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_truncate
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_truncate.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_truncate.files | map(attribute='path') | list | first }}"
      when: find_truncate.matched > 0
    
    - name: Inserts/replaces the truncate rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_truncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030540
    
    - name: Inserts/replaces the truncate rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_truncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030540
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the truncate rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_truncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030540
    
    - name: Inserts/replaces the truncate rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S truncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S truncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_truncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030540
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit setxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_setxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_setxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_setxattr.files | map(attribute='path') | list | first }}"
      when: find_setxattr.matched > 0
    
    - name: Inserts/replaces the setxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_setxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the setxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_setxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the setxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_setxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the setxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S setxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S setxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_setxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lremovexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lremovexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_lremovexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lremovexattr.files | map(attribute='path') | list | first }}"
      when: find_lremovexattr.matched > 0
    
    - name: Inserts/replaces the lremovexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S lremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lremovexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lremovexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lremovexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit creat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_creat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_creat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_creat.files | map(attribute='path') | list | first }}"
      when: find_creat.matched > 0
    
    - name: Inserts/replaces the creat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030500
    
    - name: Inserts/replaces the creat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030500
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the creat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030500
    
    - name: Inserts/replaces the creat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_creat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030500
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fremovexattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fremovexattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fremovexattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fremovexattr.files | map(attribute='path') | list | first }}"
      when: find_fremovexattr.matched > 0
    
    - name: Inserts/replaces the fremovexattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fremovexattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fremovexattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fremovexattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fremovexattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fremovexattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit unlink tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_unlink
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_unlink.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_unlink.files | map(attribute='path') | list | first }}"
      when: find_unlink.matched > 0
    
    - name: Inserts/replaces the unlink rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_unlink
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the unlink rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_unlink
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the unlink rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_unlink
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the unlink rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S unlink -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S unlink -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_unlink
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fsetxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fsetxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fsetxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fsetxattr.files | map(attribute='path') | list | first }}"
      when: find_fsetxattr.matched > 0
    
    - name: Inserts/replaces the fsetxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fsetxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fsetxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fsetxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit open tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_open
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_open.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_open.files | map(attribute='path') | list | first }}"
      when: find_open.matched > 0
    
    - name: Inserts/replaces the open rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_open
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030510
    
    - name: Inserts/replaces the open rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_open
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030510
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the open rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_open
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030510
    
    - name: Inserts/replaces the open rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S open -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S open -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_open
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030510
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit lsetxattr tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_lsetxattr
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_lsetxattr.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_lsetxattr.files | map(attribute='path') | list | first }}"
      when: find_lsetxattr.matched > 0
    
    - name: Inserts/replaces the lsetxattr rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lsetxattr rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the lsetxattr rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_lsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the lsetxattr rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S lsetxattr -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_lsetxattr
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit chmod tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_chmod
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_chmod.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_chmod.files | map(attribute='path') | list | first }}"
      when: find_chmod.matched > 0
    
    - name: Inserts/replaces the chmod rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_chmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the chmod rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_chmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the chmod rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_chmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the chmod rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S chmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S chmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_chmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit open_by_handle_at tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_open_by_handle_at
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_open_by_handle_at.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_open_by_handle_at.files | map(attribute='path') | list | first }}"
      when: find_open_by_handle_at.matched > 0
    
    - name: Inserts/replaces the open_by_handle_at rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030530
    
    - name: Inserts/replaces the open_by_handle_at rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030530
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the open_by_handle_at rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030530
    
    - name: Inserts/replaces the open_by_handle_at rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S open_by_handle_at -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_open_by_handle_at
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030530
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit ftruncate tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_ftruncate
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_ftruncate.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_ftruncate.files | map(attribute='path') | list | first }}"
      when: find_ftruncate.matched > 0
    
    - name: Inserts/replaces the ftruncate rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_ftruncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030550
    
    - name: Inserts/replaces the ftruncate rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_ftruncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030550
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the ftruncate rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_ftruncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030550
    
    - name: Inserts/replaces the ftruncate rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_ftruncate
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030550
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit unlinkat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_unlinkat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_unlinkat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_unlinkat.files | map(attribute='path') | list | first }}"
      when: find_unlinkat.matched > 0
    
    - name: Inserts/replaces the unlinkat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S unlinkat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S unlinkat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_unlinkat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the unlinkat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S unlinkat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S unlinkat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_unlinkat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the unlinkat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S unlinkat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S unlinkat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_unlinkat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the unlinkat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S unlinkat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S unlinkat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_unlinkat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit fchmod tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_fchmod
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_fchmod.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_fchmod.files | map(attribute='path') | list | first }}"
      when: find_fchmod.matched > 0
    
    - name: Inserts/replaces the fchmod rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchmod rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the fchmod rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_fchmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    - name: Inserts/replaces the fchmod rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S fchmod -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S fchmod -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_fchmod
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit openat tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_openat
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_openat.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_openat.files | map(attribute='path') | list | first }}"
      when: find_openat.matched > 0
    
    - name: Inserts/replaces the openat rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_openat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030520
    
    - name: Inserts/replaces the openat rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_openat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030520
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the openat rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_openat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030520
    
    - name: Inserts/replaces the openat rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S openat -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S openat -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_openat
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
        - DISA-STIG-RHEL-07-030520
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit rename tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other DAC audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-F key=perm_mod$"
        patterns: "*.rules"
      register: find_rename
    
    - name: If existing DAC ruleset not found, use /etc/audit/rules.d/access.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/access.rules
      when: find_rename.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_rename.files | map(attribute='path') | list | first }}"
      when: find_rename.matched > 0
    
    - name: Inserts/replaces the rename rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b32 -S rename -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S rename -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_rename
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the rename rule in rules.d when on x86_64
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "{{ item }}"
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S rename -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S rename -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_rename
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the rename rule in /etc/audit/audit.rules when on x86
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-a always,exit -F arch=b32 -S rename -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b32 -S rename -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      tags:
        - audit_rules_unsuccessful_file_modification_rename
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    - name: Inserts/replaces the rename rule in audit.rules when on x86_64
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
        create: yes
      with_items:
        - "-a always,exit -F arch=b64 -S rename -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -F key=access"
        - "-a always,exit -F arch=b64 -S rename -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -F key=access"
      when: audit_arch == 'b64'
      tags:
        - audit_rules_unsuccessful_file_modification_rename
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.4
        - PCI-DSS-Req-10.2.1
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit shadow tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k audit_rules_usergroup_modification$"
        patterns: "*.rules"
      register: find_shadow
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_shadow.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_shadow.files | map(attribute='path') | list | first }}"
      when: find_shadow.matched > 0
    
    - name: Inserts/replaces the shadow rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /etc/shadow -p wa -k audit_rules_usergroup_modification"
        create: yes
      tags:
        - audit_rules_usergroup_modification_shadow
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030873
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the shadow rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /etc/shadow -p wa -k audit_rules_usergroup_modification"
      tags:
        - audit_rules_usergroup_modification_shadow
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030873
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit opasswd tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k audit_rules_usergroup_modification$"
        patterns: "*.rules"
      register: find_opasswd
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_opasswd.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_opasswd.files | map(attribute='path') | list | first }}"
      when: find_opasswd.matched > 0
    
    - name: Inserts/replaces the opasswd rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /etc/security/opasswd -p wa -k audit_rules_usergroup_modification"
        create: yes
      tags:
        - audit_rules_usergroup_modification_opasswd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030874
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the opasswd rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /etc/security/opasswd -p wa -k audit_rules_usergroup_modification"
      tags:
        - audit_rules_usergroup_modification_opasswd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030874
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit gshadow tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k audit_rules_usergroup_modification$"
        patterns: "*.rules"
      register: find_gshadow
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_gshadow.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_gshadow.files | map(attribute='path') | list | first }}"
      when: find_gshadow.matched > 0
    
    - name: Inserts/replaces the gshadow rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /etc/gshadow -p wa -k audit_rules_usergroup_modification"
        create: yes
      tags:
        - audit_rules_usergroup_modification_gshadow
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030872
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the gshadow rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /etc/gshadow -p wa -k audit_rules_usergroup_modification"
      tags:
        - audit_rules_usergroup_modification_gshadow
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030872
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit passwd tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k audit_rules_usergroup_modification$"
        patterns: "*.rules"
      register: find_passwd
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_passwd.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_passwd.files | map(attribute='path') | list | first }}"
      when: find_passwd.matched > 0
    
    - name: Inserts/replaces the passwd rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /etc/passwd -p wa -k audit_rules_usergroup_modification"
        create: yes
      tags:
        - audit_rules_usergroup_modification_passwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030870
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the passwd rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /etc/passwd -p wa -k audit_rules_usergroup_modification"
      tags:
        - audit_rules_usergroup_modification_passwd
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030870
    
    
    #
    # What architecture are we on?
    #
    - name: Set architecture for audit group tasks
      set_fact:
        audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"
    
    #
    # Inserts/replaces the rule in /etc/audit/rules.d
    #
    - name: Search /etc/audit/rules.d for other user/group modification audit rules
      find:
        paths: "/etc/audit/rules.d"
        recurse: no
        contains: "-k audit_rules_usergroup_modification$"
        patterns: "*.rules"
      register: find_group
    
    - name: If existing user/group modification ruleset not found, use /etc/audit/rules.d/privileged.rules as the recipient for the rule
      set_fact:
        all_files:
          - /etc/audit/rules.d/privileged.rules
      when: find_group.matched == 0
    
    - name: Use matched file as the recipient for the rule
      set_fact:
        all_files:
          - "{{ find_group.files | map(attribute='path') | list | first }}"
      when: find_group.matched > 0
    
    - name: Inserts/replaces the group rule in rules.d when on x86
      lineinfile:
        path: "{{ all_files[0] }}"
        line: "-w /etc/group -p wa -k audit_rules_usergroup_modification"
        create: yes
      tags:
        - audit_rules_usergroup_modification_group
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030871
    
    #   
    # Inserts/replaces the rule in /etc/audit/audit.rules
    #
    - name: Inserts/replaces the group rule in /etc/audit/audit.rules
      lineinfile:
        line: "{{ item }}"
        state: present
        dest: /etc/audit/audit.rules
      with_items:
        - "-w /etc/group -p wa -k audit_rules_usergroup_modification"
      tags:
        - audit_rules_usergroup_modification_group
        - medium_severity
        - restrict_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AC-2(4)
        - NIST-800-53-AC-17(7)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-2(a)
        - NIST-800-53-AU-2(c)
        - NIST-800-53-AU-2(d)
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-IR-5
        - NIST-800-171-3.1.7
        - PCI-DSS-Req-10.2.5
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030871
    
    - name: Enable service auditd
      service:
        name: "{{item}}"
        enabled: "yes"
        state: "started"
      with_items:
        - auditd
      tags:
        - service_auditd_enabled
        - high_severity
        - enable_strategy
        - low_complexity
        - low_disruption
        - NIST-800-53-AU-3
        - NIST-800-53-AC-17(1)
        - NIST-800-53-AU-1(b)
        - NIST-800-53-AU-10
        - NIST-800-53-AU-12(a)
        - NIST-800-53-AU-12(c)
        - NIST-800-53-AU-14(1)
        - NIST-800-53-IR-5
        - NIST-800-171-3.3.1
        - NIST-800-171-3.3.2
        - NIST-800-171-3.3.6
        - PCI-DSS-Req-10
        - CJIS-5.4.1.1
        - DISA-STIG-RHEL-07-030000
    
    - name: "Set fact: Package manager reinstall command (dnf)"
      set_fact:
        package_manager_reinstall_cmd: dnf reinstall -y
      when: ansible_distribution == "Fedora"
      tags:
        - rpm_verify_hashes
        - high_severity
        - unknown_strategy
        - high_complexity
        - medium_disruption
        - NIST-800-53-CM-6(d)
        - NIST-800-53-CM-6(3)
        - NIST-800-53-SI-7(1)
        - NIST-800-171-3.3.8
        - NIST-800-171-3.4.1
        - PCI-DSS-Req-11.5
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-010020
    
    - name: "Set fact: Package manager reinstall command (yum)"
      set_fact:
        package_manager_reinstall_cmd: yum reinstall -y
      when: ansible_distribution == "RedHat" or ansible_distribution == "OracleLinux"
      tags:
        - rpm_verify_hashes
        - high_severity
        - unknown_strategy
        - high_complexity
        - medium_disruption
        - NIST-800-53-CM-6(d)
        - NIST-800-53-CM-6(3)
        - NIST-800-53-SI-7(1)
        - NIST-800-171-3.3.8
        - NIST-800-171-3.4.1
        - PCI-DSS-Req-11.5
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-010020
    
    - name: "Read files with incorrect hash"
      shell: "rpm -Va | grep -E '^..5.* /(bin|sbin|lib|lib64|usr)/' | sed -r 's;^.*\\s+(.+);\\1;g'"
      register: files_with_incorrect_hash
      changed_when: False
      when: package_manager_reinstall_cmd is defined
      check_mode: no
      tags:
        - rpm_verify_hashes
        - high_severity
        - unknown_strategy
        - high_complexity
        - medium_disruption
        - NIST-800-53-CM-6(d)
        - NIST-800-53-CM-6(3)
        - NIST-800-53-SI-7(1)
        - NIST-800-171-3.3.8
        - NIST-800-171-3.4.1
        - PCI-DSS-Req-11.5
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-010020
    
    - name: "Reinstall packages of files with incorrect hash"
      shell: "{{package_manager_reinstall_cmd}} $(rpm -qf '{{item}}')"
      with_items: "{{ files_with_incorrect_hash.stdout_lines }}"
      when: package_manager_reinstall_cmd is defined and (files_with_incorrect_hash.stdout_lines | length > 0)
      tags:
        - rpm_verify_hashes
        - high_severity
        - unknown_strategy
        - high_complexity
        - medium_disruption
        - NIST-800-53-CM-6(d)
        - NIST-800-53-CM-6(3)
        - NIST-800-53-SI-7(1)
        - NIST-800-171-3.3.8
        - NIST-800-171-3.4.1
        - PCI-DSS-Req-11.5
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-010020
    
    #
    - name: Find All Yum Repositories
      find:
        paths: "/etc/yum.repos.d/"
        patterns: "*.repo"
      register: yum_find
    
    - name: Ensure gpgcheck Enabled For All Yum Package Repositories
      with_items: "{{ yum_find.files }}"
      lineinfile:
        create: yes
        dest: "{{ item.path }}"
        regexp: '^gpgcheck'
        line: 'gpgcheck=1'
      tags:
        - ensure_gpgcheck_never_disabled
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
    
    - name: "Security patches are up to date"
      package:
        name: "*"
        state: "latest"
      tags:
        - security_patches_up_to_date
        - high_severity
        - patch_strategy
        - low_complexity
        - high_disruption
        - NIST-800-53-SI-2
        - NIST-800-53-SI-2(c)
        - NIST-800-53-MA-1(b)
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-020260
    
    - name: "Read permission of GPG key directory"
      stat:
        path: /etc/pki/rpm-gpg/
      register: gpg_key_directory_permission
      check_mode: no
      tags:
        - ensure_redhat_gpgkey_installed
        - high_severity
        - restrict_strategy
        - medium_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
    
    # It should fail if it doesn't find any fingerprints in file - maybe file was not parsed well.
    
    - name: Read signatures in GPG key
      shell: gpg --with-fingerprint '/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release' | grep 'Key fingerprint =' | tr -s ' ' | sed 's;.*= ;;g'
      changed_when: False
      register: gpg_fingerprints
      check_mode: no
      tags:
        - ensure_redhat_gpgkey_installed
        - high_severity
        - restrict_strategy
        - medium_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
    
    - name: Set Fact - Valid fingerprints
      set_fact:
         gpg_valid_fingerprints: ("567E 347A D004 4ADE 55BA 8A5F 199E 2F91 FD43 1D51" "43A6 E49C 4A38 F4BE 9ABF 2A53 4568 9C88 2FA6 58E0")
      tags:
        - ensure_redhat_gpgkey_installed
        - high_severity
        - restrict_strategy
        - medium_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
    
    - name: Import RedHat GPG key
      rpm_key:
        state: present
        key: /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
      when:
        (gpg_key_directory_permission.stat.mode <= '0755')
        and (( gpg_fingerprints.stdout_lines | difference(gpg_valid_fingerprints)) | length == 0)
        and (gpg_fingerprints.stdout_lines | length > 0)
        and (ansible_distribution == "RedHat")
      tags:
        - ensure_redhat_gpgkey_installed
        - high_severity
        - restrict_strategy
        - medium_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
    
    - name: Check existence of yum on Fedora
      stat:
        path: /etc/yum.conf
      register: yum_config_file
      check_mode: no
      when: ansible_distribution == "Fedora"
    
    # Old versions of Fedora use yum
    
    - name: Ensure GPG check is globally activated (yum)
      ini_file:
        dest: "{{item}}"
        section: main
        option: gpgcheck
        value: 1
        create: False
      with_items: "/etc/yum.conf"
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or yum_config_file.stat.exists
      tags:
        - ensure_gpgcheck_globally_activated
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-020050
    
    - name: Ensure GPG check is globally activated (dnf)
      ini_file:
        dest: "{{item}}"
        section: main
        option: gpgcheck
        value: 1
        create: False
      with_items: "/etc/dnf/dnf.conf"
      when: ansible_distribution == "Fedora"
      tags:
        - ensure_gpgcheck_globally_activated
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-53-SI-7
        - NIST-800-53-MA-1(b)
        - NIST-800-171-3.4.8
        - PCI-DSS-Req-6.2
        - CJIS-5.10.4.1
        - DISA-STIG-RHEL-07-020050
    
    - name: Check existence of yum on Fedora
      stat:
        path: /etc/yum.conf
      register: yum_config_file
      check_mode: no
      when: ansible_distribution == "Fedora"
    
    # Old versions of Fedora use yum
    
    - name: Ensure GPG check Enabled for Local Packages (Yum)
      ini_file:
        dest: "{{item}}"
        section: main
        option: localpkg_gpgcheck
        value: 1
        create: True
      with_items: "/etc/yum.conf"
      when: ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or yum_config_file.stat.exists
      tags:
        - ensure_gpgcheck_local_packages
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-171-3.4.8
        - DISA-STIG-RHEL-07-020060
    
    - name: Ensure GPG check Enabled for Local Packages (DNF)
      ini_file:
        dest: "{{item}}"
        section: main
        option: localpkg_gpgcheck
        value: 1
        create: True
      with_items: "/etc/dnf/dnf.conf"
      when: ansible_distribution == "Fedora"
      tags:
        - ensure_gpgcheck_local_packages
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-5(3)
        - NIST-800-171-3.4.8
        - DISA-STIG-RHEL-07-020060
    
    - name: "Set GNOME3 Screensaver Lock Delay After Activation Period"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: lock-delay
        value: uint32 5
        create: yes
      tags:
        - dconf_gnome_screensaver_lock_delay
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - DISA-STIG-RHEL-07-010110
    
    - name: "Prevent user modification of GNOME lock-delay"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/lock-delay'
        line: '/org/gnome/desktop/screensaver/lock-delay'
        create: yes
      tags:
        - dconf_gnome_screensaver_lock_delay
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - DISA-STIG-RHEL-07-010110
    
    - name: "Disable Full Username on Splash Screen"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: show-full-name-in-top-bar
        value: "false"
        create: yes
      tags:
        - dconf_gnome_screensaver_user_info
        - unknown_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
    
    - name: "Prevent user modification of GNOME show-full-name-in-top-bar"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/show-full-name-in-top-bar'
        line: '/org/gnome/desktop/screensaver/show-full-name-in-top-bar'
        create: yes
      tags:
        - dconf_gnome_screensaver_user_info
        - unknown_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
    
    - name: "Enable GNOME3 Screensaver Idle Activation"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: idle_activation_enabled
        value: "true"
        create: yes
      tags:
        - dconf_gnome_screensaver_idle_activation_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010100
    
    - name: "Prevent user modification of GNOME idle_activation_enabled"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/idle-activation-enabled'
        line: '/org/gnome/desktop/screensaver/idle-activation-enabled'
        create: yes
      tags:
        - dconf_gnome_screensaver_idle_activation_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010100
    
    - name: XCCDF Value inactivity_timeout_value # promote to variable
      set_fact:
        inactivity_timeout_value: !!str |-
            900
      tags:
        - always
    
    - name: "Set GNOME3 Screensaver Inactivity Timeout"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: idle-delay
        value: "{{ inactivity_timeout_value }}"
        create: yes
      tags:
        - dconf_gnome_screensaver_idle_delay
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010070
    
    - name: "Prevent user modification of GNOME idle-delay"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/idle-delay'
        line: '/org/gnome/desktop/screensaver/idle-delay'
        create: yes
      tags:
        - dconf_gnome_screensaver_idle_delay
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(a)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010070
    
    - name: "Implement Blank Screensaver"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: picture-uri
        value: string ''
        create: yes
      tags:
        - dconf_gnome_screensaver_mode_blank
        - unknown_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(b)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
    
    - name: "Prevent user modification of GNOME picture-uri"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/picture-uri'
        line: '/org/gnome/desktop/screensaver/picture-uri'
        create: yes
      tags:
        - dconf_gnome_screensaver_mode_blank
        - unknown_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(b)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
    
    - name: "Enable GNOME3 Screensaver Lock After Idle Period"
      ini_file:
        dest: "/etc/dconf/db/local.d/00-security-settings"
        section: "org/gnome/desktop/screensaver"
        option: lock-enabled
        value: "true"
        create: yes
      tags:
        - dconf_gnome_screensaver_lock_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(b)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010060
    
    - name: "Prevent user modification of GNOME lock-enabled"
      lineinfile:
        path: /etc/dconf/db/local.d/locks/00-security-settings-lock
        regexp: '^/org/gnome/desktop/screensaver/lock-enabled'
        line: '/org/gnome/desktop/screensaver/lock-enabled'
        create: yes
      tags:
        - dconf_gnome_screensaver_lock_enabled
        - medium_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-AC-11(b)
        - NIST-800-171-3.1.10
        - PCI-DSS-Req-8.1.8
        - CJIS-5.5.5
        - DISA-STIG-RHEL-07-010060
    
    - name: "Disable GDM Automatic Login"
      ini_file:
        dest: /etc/gdm/custom.conf
        section: daemon
        option: AutomaticLoginEnable
        value: "false"
        no_extra_spaces: yes
        create: yes
      tags:
        - gnome_gdm_disable_automatic_login
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-6(b)
        - NIST-800-171-3.1.1
        - DISA-STIG-RHEL-07-010440
    
    - name: "Disable GDM Guest Login"
      ini_file:
        dest: /etc/gdm/custom.conf
        section: daemon
        option: TimedLoginEnable
        value: "false"
        no_extra_spaces: yes
        create: yes
      tags:
        - gnome_gdm_disable_guest_login
        - high_severity
        - unknown_strategy
        - low_complexity
        - medium_disruption
        - NIST-800-53-CM-6(b)
        - NIST-800-171-3.1.1
        - DISA-STIG-RHEL-07-010450
    
